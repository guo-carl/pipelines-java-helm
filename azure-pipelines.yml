# Maven master
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

#pool:
#  vmImage: ubuntu-latest

variables:
  # Container registry service connection established during pipeline creation // 'dvue2-acr-evue2dsoacr-sc'
  dockerRegistryServiceConnection:  'dvue-acr-evuedsoacr-sc'
  azureResourceGroupForACR:  'dvue-acr-rg'
  # e.g.  nginx
  imageRepository: 'ava/guoyang/test/helm-tomcat-helloworld'
  imageName: 'helm-tomcat-helloworld'
  containerRegistry: 'evuedsoacr.azurecr.io'
  acrName: 'evuedsoacr'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  k8sServiceConnection: 'k8s_connection_dvueappaks2'
  k8sNamespace: 'pipeline-dev'
  k8sImagePullSecrets: 'pipeline-deploy'
  tag: '$(Build.BuildId)'


steps:
- task: Maven@3
  displayName: Maven package
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'


- task: Docker@2
  displayName: Build an Docker image
  inputs:
    repository: $(containerRegistry)/$(imageRepository)
    command: build
    Dockerfile: ./Dockerfile

- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: $(dockerRegistryServiceConnection)

- task: Docker@2
  displayName: Push image
  inputs:
    containerRegistry: $(dockerRegistryServiceConnection)
    repository: $(imageRepository)
    command: push
    tags: |
      $(tag)

- task: Docker@2
  displayName: Logout of ACR
  inputs:
    command: logout
    containerRegistry: $(dockerRegistryServiceConnection)


- task: HelmInstaller@1
  displayName: Helm 3.7.2 installer
  inputs:
    helmVersionToInstall: 3.7.2

- task: HelmDeploy@0
  displayName: Helm package
  inputs:
    command: package
    #chartPath: Application/charts/mynginx2
    chartPath: ./charts/$(imageName)
    destination: $(Build.ArtifactStagingDirectory)
    version: 1.0.$(Build.BuildId)
    arguments: --app-version $(Build.BuildId)

- task: HelmDeploy@0
  displayName: Helm login
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'k8s_connection_dvueappaks2'
    namespace: 'pipeline-dev'
    command: 'login'

- task: HelmDeploy@0
  displayName: Helm install/upgrade
  inputs:
#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureResourceGroup: $(azureResourceGroup)
#    kubernetesCluster: $(kubernetesCluster)
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'k8s_connection_dvueappaks2'
    namespace: 'pipeline-dev'
    command: upgrade
    chartType: filepath
    chartPath: $(Build.ArtifactStagingDirectory)/$(imageName)-1.0.$(Build.BuildId).tgz
    releaseName: $(imageName)
    install: true
    waitForExecution: false

- task: HelmDeploy@0
  displayName: Helm logout
  inputs:
    command: 'logout'

#- task: HelmDeploy@0
#  inputs:
#    connectionType: 'Kubernetes Service Connection'
#    kubernetesServiceConnection: 'k8s_connection_dvueappaks2'
#    namespace: 'pipeline-dev'
#    command: 'install'
#    chartType: 'Name'
#    chartName: 'chartname'
#    chartVersion: 'version'
#    releaseName: 'release'
#    overrideValues: 'key1=val1,key2=val2'

#- task: Docker@2
#  displayName: Login to ACR
#  inputs:
#    command: login
#    containerRegistry: $(dockerRegistryServiceConnection)

#- script: pwd
#  displayName: list current folder
#- script: dir
#  workingDirectory: $(Agent.BuildDirectory)
#  displayName: List contents of a folder
  #    echo 1
  #    az acr login --name $ACR_NAME
#  az acr login --name $ACR_NAME --expose-token --output tsv --query accessToken
#
#- script: |
#    echo 0
#    az acr token create -n $USER_NAME -r $ACR_NAME --scope-map _repositories_admin --only-show-errors --query "credentials.passwords[0].value" -o tsv
#    echo 1
#    echo $ACR_NAME
#    echo $USER_NAME
#    echo 2
#    echo $PASSWORD
#    echo 3
#    helm registry login $ACR_NAME.azurecr.io  --username $USER_NAME  --password $PASSWORD
#    echo 4
#  displayName: helm login
#  env:
#    HELM_EXPERIMENTAL_OCI: 1
#    ACR_NAME: $(acrName)
#    USER_NAME: "helm-token"
#    PASSWORD: "123"
#
#- task: HelmDeploy@0
#  displayName: Helm save
#  inputs:
#    command: push
##    chartNameForACR: $(containerRegistry)/test/mynginx2:0.1.3
#    chartNameForACR: test/mynginx2:0.1.3
#    #chartPathForACR: Application/charts/sampleapp
#    chartPathForACR: ./charts/mynginx2
##    azureSubscriptionEndpointForACR: $(k8sServiceConnection)
##    azureResourceGroupForACR: $(azureResourceGroupForACR)
#    azureContainerRegistry: $(containerRegistry)
#    connectionType: Kubernetes Service Connection
#    kubernetesServiceEndpoint: $(k8sServiceConnection)
#    arguments: $(Build.ArtifactStagingDirectory)/mynginx2-0.1.3.tgz oci://$(containerRegistry)/helm/test
#  env:
#    HELM_EXPERIMENTAL_OCI: 1
#
#
#- task: Docker@2
#  displayName: Logout of ACR
#  inputs:
#    command: logout
#    containerRegistry: $(dockerRegistryServiceConnection)


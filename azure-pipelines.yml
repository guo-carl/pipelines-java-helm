# Maven master
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

#pool:
#  vmImage: ubuntu-latest

variables:
  # Container registry service connection established during pipeline creation // 'dvue2-acr-evue2dsoacr-sc'
  dockerRegistryServiceConnection:  'dvue-acr-evuedsoacr-sc'
  # e.g.  nginx
  imageRepository: 'ava/guoyang/test/test-tomcat'
  containerRegistry: 'evuedsoacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  k8sServiceConnection: 'k8s_connection_dvueappaks2'
  k8sNamespace: 'pipeline-dev'
  k8sImagePullSecrets: 'pipeline-deploy'
  tag: '$(Build.BuildId)'


steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: $(containerRegistry)/$(imageRepository)
    command: build
    Dockerfile: ./Dockerfile

- task: Docker@2
  displayName: Login to ACR
  inputs:
    command: login
    containerRegistry: $(dockerRegistryServiceConnection)

- task: Docker@2
  displayName: Push image
  inputs:
    containerRegistry: $(dockerRegistryServiceConnection)
    repository: $(imageRepository)
    command: push
    tags: |
      $(tag)

- task: Docker@2
  displayName: Logout of ACR
  inputs:
    command: logout
    containerRegistry: $(dockerRegistryServiceConnection)

- task: KubernetesManifest@0
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: $(k8sServiceConnection)
    namespace: $(k8sNamespace)
    # $(System.ArtifactsDirectory) ==> /home/vsts/work/1/a/ on server
    manifests: |
      manifests/*.yaml
    containers: $(containerRegistry)/$(imageRepository):$(tag)
    imagePullSecrets: $(k8sImagePullSecrets)